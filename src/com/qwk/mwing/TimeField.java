package com.qwk.mwing;

import java.awt.Color;
import java.awt.Component;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFormattedTextField;

/*
 * TimeField.java
 *
 */
/**
 *
 * @author  
 */

//定义时间输入框
public class TimeField extends javax.swing.JPanel {

    private static final SimpleDateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private int dot = 0;// 插入符所在位置的索引值
    private int mark = 0;// 逻辑选择另一端的索引值
    private boolean cancel = false;// 用来标记是否取消输入事件

    /** Creates new form TimeField */
    public TimeField() {
        initComponents();
    }

    @Override
    public void setEnabled(boolean aFlag) {
        super.setEnabled(aFlag);
        flowPanel.setEnabled(aFlag);
        if (aFlag) {
            setBackground(new Color(255, 255, 255));
            flowPanel.setBackground(new Color(255, 255, 255));
        } else {
            setBackground(new Color(224, 223, 227));
            flowPanel.setBackground(new Color(224, 223, 227));
        }
        Component[] components = flowPanel.getComponents();
        for (int i = 0; i < components.length; i++) {
            components[i].setEnabled(aFlag);
        }
    }

    public String getTime() {
        String time = hourFormattedTextField.getText() + ":" + minuteFormattedTextField.getText() + ":" + secondFormattedTextField.getText();
        if (time.length() < 8) {
            try {
                time = DATE_FORMAT.format(DATE_FORMAT.parse("2008-8-8 " + time)).substring(11);
            } catch (ParseException ex) {
                Logger.getLogger(TimeField.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return time;
    }

    public void setTime(int hour, int minute, int second) {
        setTime(hour + "", minute + "", second + "");
    }

    public void setTime(String time) {
        String[] split = time.split(":");
        setTime(split[0], split[1], split[2]);
    }

    private void setTime(String hour, String minute, String second) {
        hourFormattedTextField.setText(hour);
        minuteFormattedTextField.setText(minute);
        secondFormattedTextField.setText(second);
    }

    public void fillWithSystemTime() {
        Calendar now = Calendar.getInstance();
        int hour = now.get(Calendar.HOUR_OF_DAY);
        int minute = now.get(Calendar.MINUTE);
        int second = now.get(Calendar.SECOND);
        setTime(hour, minute, second);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        flowPanel = new javax.swing.JPanel();
        hourFormattedTextField = new javax.swing.JFormattedTextField();
        hmLabel = new javax.swing.JLabel();
        minuteFormattedTextField = new javax.swing.JFormattedTextField();
        msLabel = new javax.swing.JLabel();
        secondFormattedTextField = new javax.swing.JFormattedTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(122, 138, 153)));

        flowPanel.setBackground(new java.awt.Color(255, 255, 255));
        flowPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 0, 0));

        hourFormattedTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        hourFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("00"))));
        hourFormattedTextField.setText("00");
        hourFormattedTextField.setName("hour"); // NOI18N
        hourFormattedTextField.setPreferredSize(new java.awt.Dimension(16, 17));
        hourFormattedTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                formattedTextFieldCaretUpdate(evt);
            }
        });
        hourFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formattedTextFieldFocusGained(evt);
            }
        });
        hourFormattedTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formattedTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formattedTextFieldKeyTyped(evt);
            }
        });
        flowPanel.add(hourFormattedTextField);

        hmLabel.setText(":");
        flowPanel.add(hmLabel);

        minuteFormattedTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        minuteFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("00"))));
        minuteFormattedTextField.setText("00");
        minuteFormattedTextField.setName("minute"); // NOI18N
        minuteFormattedTextField.setPreferredSize(new java.awt.Dimension(16, 17));
        minuteFormattedTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                formattedTextFieldCaretUpdate(evt);
            }
        });
        minuteFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formattedTextFieldFocusGained(evt);
            }
        });
        minuteFormattedTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formattedTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formattedTextFieldKeyTyped(evt);
            }
        });
        flowPanel.add(minuteFormattedTextField);

        msLabel.setText(":");
        flowPanel.add(msLabel);

        secondFormattedTextField.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        secondFormattedTextField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("00"))));
        secondFormattedTextField.setText("00");
        secondFormattedTextField.setName("second"); // NOI18N
        secondFormattedTextField.setPreferredSize(new java.awt.Dimension(16, 17));
        secondFormattedTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                formattedTextFieldCaretUpdate(evt);
            }
        });
        secondFormattedTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formattedTextFieldFocusGained(evt);
            }
        });
        secondFormattedTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formattedTextFieldKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                formattedTextFieldKeyTyped(evt);
            }
        });
        flowPanel.add(secondFormattedTextField);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(flowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(flowPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>                        

private void formattedTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {                                               
// TODO add your handling code here:
    dot = evt.getDot();
    mark = evt.getMark();
}                                              

private void formattedTextFieldKeyPressed(java.awt.event.KeyEvent evt) {                                              
// TODO add your handling code here:
    int keyCode = evt.getKeyCode();
    if ((keyCode > 47 && keyCode < 58) || (keyCode > 95 && keyCode < 106)) {
        if (dot == mark) {
            JFormattedTextField formattedTextField = (JFormattedTextField) evt.getSource();
            String text = formattedTextField.getText();
            int digit = text.length();
            if (digit > 0) {
                if (digit == 1) {
                    int figure = Integer.valueOf(text);
                    String name = formattedTextField.getName();
                    if (name.equals("hour")) {
                        if (figure > 1) {
                            if (figure == 2) {
                                if (keyCode > 51) {
                                    cancel = true;
                                }
                            } else {
                                cancel = true;
                            }
                        }
                    } else {
                        if (figure > 5) {
                            cancel = true;
                        }
                    }
                } else {
                    cancel = true;
                }
            }
        }
    } else {
        cancel = true;
    }
}                                             

private void formattedTextFieldKeyTyped(java.awt.event.KeyEvent evt) {                                            
// TODO add your handling code here:
    if (cancel) {
        evt.consume();
        cancel = false;
    }
}                                           

private void formattedTextFieldFocusGained(java.awt.event.FocusEvent evt) {                                               
// TODO add your handling code here:    
    JFormattedTextField formattedTextField = (JFormattedTextField) evt.getSource();
    formattedTextField.selectAll();
}                                              

    // Variables declaration - do not modify                     
    private javax.swing.JPanel flowPanel;
    private javax.swing.JLabel hmLabel;
    private javax.swing.JFormattedTextField hourFormattedTextField;
    private javax.swing.JFormattedTextField minuteFormattedTextField;
    private javax.swing.JLabel msLabel;
    private javax.swing.JFormattedTextField secondFormattedTextField;
    // End of variables declaration                   
}
